        -:    0:Source:./dynamic_array.h
        -:    0:Graph:./dynamic_array_test.gcno
        -:    0:Data:./dynamic_array_test.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#ifndef DYNAMIC_ARRAY_H
        -:    2:#define DYNAMIC_ARRAY_H
        -:    3:
        -:    4:#include <cstddef>
        -:    5:#include <stdexcept>
        -:    6:
        -:    7:template <typename T>
        -:    8:class DynamicArray {
        -:    9:private:
        -:   10:    T* data_;         // Pointer to the dynamic array
        -:   11:    size_t size_;     // Current number of elements in the array
        -:   12:    size_t capacity_; // Maximum capacity of the array
        -:   13:
        -:   14:    // Private function to resize the array when needed
function _ZN12DynamicArrayIiE6ResizeEm called 0 returned 0% blocks executed 0%
    #####:   15:    void Resize(size_t newCapacity) {
    #####:   16:        T* newData = new T[newCapacity];
    #####:   17:        for (size_t i = 0; i < size_; ++i) {
branch  0 never executed
branch  1 never executed
    #####:   18:            newData[i] = data_[i];
    #####:   19:        }
    #####:   20:        delete[] data_; // Free the old memory
branch  0 never executed
branch  1 never executed
    #####:   21:        data_ = newData;
    #####:   22:        capacity_ = newCapacity;
    #####:   23:    }
        -:   24:
        -:   25:public:
        -:   26:    // Constructor
function _ZN12DynamicArrayIiEC1Em called 2 returned 100% blocks executed 100%
function _ZN12DynamicArrayIiEC2Em called 2 returned 100% blocks executed 100%
        4:   27:    DynamicArray(size_t initialCapacity = 2)
        4:   28:        : size_(0), capacity_(initialCapacity) {
        2:   29:        data_ = new T[capacity_];
        4:   30:    }
        -:   31:
        -:   32:    // Destructor
function _ZN12DynamicArrayIiED1Ev called 2 returned 100% blocks executed 100%
function _ZN12DynamicArrayIiED2Ev called 2 returned 100% blocks executed 100%
        4:   33:    ~DynamicArray() {
        2:   34:        delete[] data_;
branch  0 taken 100%
branch  1 taken 0%
        4:   35:    }
        -:   36:
        -:   37:    // Return the current size of the array
function _ZNK12DynamicArrayIiE7GetSizeEv called 3 returned 100% blocks executed 100%
        3:   38:    size_t GetSize() const {
        3:   39:        return size_;
        -:   40:    }
        -:   41:
        -:   42:    // Return the current capacity of the array
function _ZNK12DynamicArrayIiE11GetCapacityEv called 0 returned 0% blocks executed 0%
    #####:   43:    size_t GetCapacity() const {
    #####:   44:        return capacity_;
        -:   45:    }
        -:   46:
        -:   47:    // Add an element to the end of the array
function _ZN12DynamicArrayIiE8PushBackERKi called 2 returned 100% blocks executed 66%
        2:   48:    void PushBack(const T& element) {
        2:   49:        if (size_ == capacity_) {
branch  0 taken 100%
branch  1 taken 0%
    #####:   50:            Resize(capacity_ * 2); // Double the capacity if the array is full
    #####:   51:        }
        2:   52:        data_[size_++] = element;
        2:   53:    }
        -:   54:
        -:   55:    // Remove the last element of the array
function _ZN12DynamicArrayIiE7PopBackEv called 0 returned 0% blocks executed 0%
    #####:   56:    void PopBack() {
    #####:   57:        if (size_ > 0) {
branch  0 never executed
branch  1 never executed
    #####:   58:            --size_;
    #####:   59:        }
    #####:   60:    }
        -:   61:
        -:   62:    // Access an element by index (read-only)
        -:   63:    const T& operator[](size_t index) const {
        -:   64:        if (index >= size_) {
        -:   65:            throw std::out_of_range("Index out of bounds");
        -:   66:        }
        -:   67:        return data_[index];
        -:   68:    }
        -:   69:
        -:   70:    // Access an element by index (read/write)
function _ZN12DynamicArrayIiEixEm called 0 returned 0% blocks executed 0%
    #####:   71:    T& operator[](size_t index) {
    #####:   72:        if (index >= size_) {
branch  0 never executed
branch  1 never executed
    #####:   73:            throw std::out_of_range("Index out of bounds");
branch  0 never executed
branch  1 never executed
        -:   74:        }
    #####:   75:        return data_[index];
    #####:   76:    }
        -:   77:
        -:   78:    // Clear the array
function _ZN12DynamicArrayIiE5ClearEv called 0 returned 0% blocks executed 0%
    #####:   79:    void Clear() {
    #####:   80:        size_ = 0;
    #####:   81:    }
        -:   82:};
        -:   83:
        -:   84:#endif // DYNAMIC_ARRAY_H
